{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/bookstore-service.service\";\nimport * as i3 from \"@angular/router\";\nexport class EditBooksComponent {\n  constructor(fb, bookservice, router, activatedRoute) {\n    this.fb = fb;\n    this.bookservice = bookservice;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.bookForm = this.fb.group({\n      title: ['', Validators.required],\n      author: ['', Validators.required]\n    });\n    this.route = activatedRoute; // Initialize the property in the constructor\n  }\n\n  ngOnInit() {\n    this.route?.params.subscribe(params => {\n      const id = params['id'];\n      if (id) {\n        // If an id parameter is present, fetch the book details for update\n        this.bookservice.getBook(id).subscribe(book => {\n          this.bookForm.patchValue(book);\n        });\n      }\n    });\n  }\n  onSubmit() {\n    if (this.bookForm.valid) {\n      const id = this.route?.snapshot.params['id'];\n      if (id) {\n        // If an id parameter is present, update the book\n        this.bookservice.updateBook(id, this.bookForm.value).subscribe(() => {\n          this.router.navigate(['/table']);\n        });\n      } else {\n        // If no id parameter is present, add a new book\n        this.bookservice.addBook(this.bookForm.value).subscribe(() => {\n          this.router.navigate(['/table']);\n        });\n      }\n    }\n  }\n  static #_ = this.ɵfac = function EditBooksComponent_Factory(t) {\n    return new (t || EditBooksComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.BookstoreServiceService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditBooksComponent,\n    selectors: [[\"app-edit-books\"]],\n    inputs: {\n      selectedBook: \"selectedBook\"\n    },\n    decls: 14,\n    vars: 3,\n    consts: [[1, \"container\", \"mt-5\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"title\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"title\", \"formControlName\", \"title\", 1, \"form-control\"], [\"for\", \"author\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"author\", \"formControlName\", \"author\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n    template: function EditBooksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function EditBooksComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n        i0.ɵɵtext(6, \"Title:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Author:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 7);\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate((ctx.route == null ? null : ctx.route.snapshot == null ? null : ctx.route.snapshot.params == null ? null : ctx.route.snapshot.params[\"id\"]) ? \"Update Book\" : \"Add New Book\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.bookForm);\n        i0.ɵɵadvance(10);\n        i0.ɵɵtextInterpolate1(\" \", (ctx.route == null ? null : ctx.route.snapshot == null ? null : ctx.route.snapshot.params == null ? null : ctx.route.snapshot.params[\"id\"]) ? \"Update\" : \"Submit\", \" \");\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","EditBooksComponent","constructor","fb","bookservice","router","activatedRoute","bookForm","group","title","required","author","route","ngOnInit","params","subscribe","id","getBook","book","patchValue","onSubmit","valid","snapshot","updateBook","value","navigate","addBook","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","BookstoreServiceService","i3","Router","ActivatedRoute","_2","selectors","inputs","selectedBook","decls","vars","consts","template","EditBooksComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","EditBooksComponent_Template_form_ngSubmit_3_listener","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","ɵɵproperty","ɵɵtextInterpolate1"],"sources":["C:\\Users\\003KS4744\\source\\bookstore-app\\src\\app\\components\\edit-books\\edit-books.component.ts","C:\\Users\\003KS4744\\source\\bookstore-app\\src\\app\\components\\edit-books\\edit-books.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BookstoreServiceService } from 'src/app/services/bookstore-service.service';\n\n@Component({\n  selector: 'app-edit-books',\n  templateUrl: './edit-books.component.html',\n  styleUrls: ['./edit-books.component.css'],\n})\nexport class EditBooksComponent implements OnInit {\n  @Input() selectedBook: any; // Input property to receive selected book for update\n\n  bookForm: FormGroup;\n  route?: ActivatedRoute;  // Make ActivatedRoute public\n  constructor(\n    private fb: FormBuilder,\n    private bookservice: BookstoreServiceService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {\n    this.bookForm = this.fb.group({\n      title: ['', Validators.required],\n      author: ['', Validators.required],\n    });\n    this.route = activatedRoute;  // Initialize the property in the constructor\n  }\n  ngOnInit() {\n    this.route?.params.subscribe((params) => {\n      const id = params['id'];\n\n      if (id) {\n        // If an id parameter is present, fetch the book details for update\n        this.bookservice.getBook(id).subscribe((book) => {\n          this.bookForm.patchValue(book);\n        });\n      }\n    });\n  }\n  onSubmit() {\n    if (this.bookForm.valid) {\n      const id = this.route?.snapshot.params['id'];\n\n      if (id) {\n        // If an id parameter is present, update the book\n        this.bookservice.updateBook(id, this.bookForm.value).subscribe(() => {\n          this.router.navigate(['/table']);\n        });\n      } else {\n        // If no id parameter is present, add a new book\n        this.bookservice.addBook(this.bookForm.value).subscribe(() => {\n          this.router.navigate(['/table']);\n        });\n      }\n    }\n  }\n}\n","\n\n<div class=\"container mt-5\">\n  <h2>{{ route?.snapshot?.params?.['id'] ? 'Update Book' : 'Add New Book' }}</h2>\n  <form [formGroup]=\"bookForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"mb-3\">\n      <label for=\"title\" class=\"form-label\">Title:</label>\n      <input type=\"text\" id=\"title\" class=\"form-control\" formControlName=\"title\" />\n    </div>\n\n    <div class=\"mb-3\">\n      <label for=\"author\" class=\"form-label\">Author:</label>\n      <input type=\"text\" id=\"author\" class=\"form-control\" formControlName=\"author\" />\n    </div>\n\n    <button type=\"submit\" class=\"btn btn-primary\">\n      {{ route?.snapshot?.params?.['id']? 'Update' : 'Submit' }}\n    </button>\n  </form>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}